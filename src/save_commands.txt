
linuslindon@crc-dot1x-nat-10-239-19-104 src % 
linuslindon@crc-dot1x-nat-10-239-19-104 src % cat roadNet-CA.txt| awk '{print $1,"\n",$2}' |  awk '{$1=$1};1' | sort -n | uniq | less
linuslindon@crc-dot1x-nat-10-239-19-104 src % cat roadNet-CA.txt| awk '{print $1,"\n",$2}' |  awk '{$1=$1};1' | sort -n | uniq | less
linuslindon@crc-dot1x-nat-10-239-19-104 src % cat roadNet-CA.txt| awk '{print $1,"\n",$2}' |  awk '{$1=$1};1' | sort -n | uniq > foobar.txt
linuslindon@crc-dot1x-nat-10-239-19-104 src % vi foobar.txt 
linuslindon@crc-dot1x-nat-10-239-19-104 src % vi roadNet-CA.txt 
linuslindon@crc-dot1x-nat-10-239-19-104 src % cat roadNet-CA.txt| awk '{print $1,$2}' |  less                                          
linuslindon@crc-dot1x-nat-10-239-19-104 src % cat roadNet-CA.txt| awk '{print $1,"\n",$2}' |  less
linuslindon@crc-dot1x-nat-10-239-19-104 src % cat roadNet-CA.txt| awk '{print $1,"\n",$2}' > foobar
linuslindon@crc-dot1x-nat-10-239-19-104 src % vi foobar
linuslindon@crc-dot1x-nat-10-239-19-104 src % vi roadNet-CA.txt 
linuslindon@crc-dot1x-nat-10-239-19-104 src % cat roadNet-CA.txt| awk '{print $1,"\n",$2}' |  awk '{$1=$1};1' | sort -n | uniq > foobar.txt
linuslindon@crc-dot1x-nat-10-239-19-104 src % vi foobar.txt 
linuslindon@crc-dot1x-nat-10-239-19-104 src % grep -v 
usage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]]
        [-e pattern] [-f file] [--binary-files=value] [--color=when]
        [--context[=num]] [--directories=action] [--label] [--line-buffered]
        [--null] [pattern] [file ...]
linuslindon@crc-dot1x-nat-10-239-19-104 src % vi foobar.txt 
linuslindon@crc-dot1x-nat-10-239-19-104 src % 



// get BFS distances to all other nodes, add them up, then divide them by n-1 
// that is the closeness centrality 



// approx algorithm 
// rando selected 1% of nodes, and do the full calculation of the distances for those
// for those nodes I will have the distance for those nodes and every other node
// for all of the other nodes they will be closest to one of them
// there will be one node that they are closest to 
// take the other node, and get the thing, sort it, and find where they're closest 
// then for that node, their neighbors will get a distance of 1, then for all of the other nodes, they 
// for every other node, it's a distance from a plus the distance that it takes to get to

// if it becomes untennable, get 10% of the nodes, and then the edges that contain those nodes
// then only keep the pairs that obth sides are the subset that I decided on 

// strongly connected is much easier 